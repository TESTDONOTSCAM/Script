_G.CursedChest = true

spawn(function()
    pcall(function()
    while wait() do
    if _G.CursedChest == true then
    if not game:GetService("Players").LocalPlayer.Character.HumanoidRootPart:FindFirstChild("BodyClip") then
    local Noclip = Instance.new("BodyVelocity")
    Noclip.Name = "BodyClip"
    Noclip.Parent = game:GetService("Players").LocalPlayer.Character.HumanoidRootPart
    Noclip.MaxForce = Vector3.new(100000,100000,100000)
    Noclip.Velocity = Vector3.new(0,0,0)
                end
            end
        end
    end)
end)
    
spawn(function()
    pcall(function()
    game:GetService("RunService").Stepped:Connect(function()
    if _G.CursedChest == true then
    for _, v in pairs(game:GetService("Players").LocalPlayer.Character:GetDescendants()) do
    if v:IsA("BasePart") then
    v.CanCollide = false
                    end
                end
            end
        end)
    end)
end)

function TPP(CFgo)
	if game.Players.LocalPlayer.Character:WaitForChild("Humanoid").Health <= 0 or not game:GetService("Players").LocalPlayer.Character:WaitForChild("Humanoid") then tweenP:Cancel() repeat wait() until game:GetService("Players").LocalPlayer.Character:WaitForChild("Humanoid") and game:GetService("Players").LocalPlayer.Character:WaitForChild("Humanoid").Health > 0 wait(7) return end
	local tween_sP = game:service"TweenService"
	local infoP = TweenInfo.new((game:GetService("Players")["LocalPlayer"].Character.HumanoidRootPart.Position - CFgo.Position).Magnitude/150, Enum.EasingStyle.Linear)
	tweenP = tween_sP:Create(game.Players.LocalPlayer.Character["HumanoidRootPart"], infoP, {CFrame = CFgo})
tweenP:Play()
tweenP.Completed:Wait(E)

local tweenfunc = {}
	
function tweenfunc:Stop()
	tweenP:Cancel()
end
	return tweenfunc
end

spawn(function()
    while wait() do
        if _G.CursedChest then
            pcall(function()
                    if game:GetService("Workspace")["Map"].CursedTreasure then
					TPP(game.Workspace.Map:FindFirstChild("CursedTreasure").CFrame)
					_G.CursedChest = false
                end
            end)
        end
    end
end)
